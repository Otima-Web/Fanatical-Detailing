{"ast":null,"code":"var _jsxFileName = \"/Users/brian/Desktop/Fanatical/Client/src/Pages/payPal.js\",\n  _s = $RefreshSig$();\nimport { PayPalScriptProvider, PayPalButtons } from \"@paypal/react-paypal-js\";\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SERVER = 'http://server.railway.internal:8080';\nfunction Message({\n  content\n}) {\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: content\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 12\n  }, this);\n}\n_c = Message;\nfunction PayPal({\n  giftCard\n}) {\n  _s();\n  const [message, setMessage] = useState(\"\");\n  const initialOptions = {\n    \"client-id\": \"AcyAYnzrPLNOe3uGmuZTIbpf-pEHgpKyCKU4pGYaQALmHGD671Z_FhE-jH3gE3WnidhKVmofYGnCmS9G\",\n    \"enable-funding\": \"paylater,venmo,card\",\n    \"disable-funding\": \"\",\n    \"data-sdk-integration-source\": \"integrationbuilder_sc\"\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"payment\",\n    children: [/*#__PURE__*/_jsxDEV(PayPalScriptProvider, {\n      options: initialOptions,\n      children: /*#__PURE__*/_jsxDEV(PayPalButtons, {\n        style: {\n          shape: \"rect\",\n          layout: \"vertical\"\n        },\n        createOrder: async () => {\n          try {\n            const response = await fetch(`${SERVER}/api/orders/`, {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\"\n              },\n              // use the \"body\" param to optionally pass additional order information\n              // like product ids and quantities\n              body: JSON.stringify({\n                cart: {\n                  id: \"GiftCard\",\n                  quantity: `${giftCard}`\n                }\n              })\n            });\n            const orderData = await response.json();\n            if (orderData.id) {\n              return orderData.id;\n            } else {\n              var _orderData$details;\n              const errorDetail = orderData === null || orderData === void 0 ? void 0 : (_orderData$details = orderData.details) === null || _orderData$details === void 0 ? void 0 : _orderData$details[0];\n              const errorMessage = errorDetail ? `${errorDetail.issue} ${errorDetail.description} (${orderData.debug_id})` : JSON.stringify(orderData);\n              throw new Error(errorMessage);\n            }\n          } catch (error) {\n            console.error(error);\n            setMessage(`Could not initiate PayPal Checkout...${error}`);\n          }\n        },\n        onApprove: async (data, actions) => {\n          try {\n            var _orderData$details2;\n            const response = await fetch(`${SERVER}/api/orders/${data.orderID}/capture`, {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\"\n              }\n            });\n            const orderData = await response.json();\n            // Three cases to handle:\n            //   (1) Recoverable INSTRUMENT_DECLINED -> call actions.restart()\n            //   (2) Other non-recoverable errors -> Show a failure message\n            //   (3) Successful transaction -> Show confirmation or thank you message\n\n            const errorDetail = orderData === null || orderData === void 0 ? void 0 : (_orderData$details2 = orderData.details) === null || _orderData$details2 === void 0 ? void 0 : _orderData$details2[0];\n            if ((errorDetail === null || errorDetail === void 0 ? void 0 : errorDetail.issue) === \"INSTRUMENT_DECLINED\") {\n              // (1) Recoverable INSTRUMENT_DECLINED -> call actions.restart()\n              // recoverable state, per https://developer.paypal.com/docs/checkout/standard/customize/handle-funding-failures/\n              return actions.restart();\n            } else if (errorDetail) {\n              // (2) Other non-recoverable errors -> Show a failure message\n              throw new Error(`${errorDetail.description} (${orderData.debug_id})`);\n            } else {\n              // (3) Successful transaction -> Show confirmation or thank you message\n              // Or go to another URL:  actions.redirect('thank_you.html');\n              const transaction = orderData.purchase_units[0].payments.captures[0];\n              setMessage(`Transaction ${transaction.status}: ${transaction.id}. See console for all available details`);\n              console.log(\"Capture result\", orderData, JSON.stringify(orderData, null, 2));\n            }\n          } catch (error) {\n            console.error(error);\n            setMessage(`Sorry, your transaction could not be processed...${error}`);\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Message, {\n      content: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 9\n  }, this);\n}\n_s(PayPal, \"EiOGSxO4GWQlH0sM782nQ9JwuAs=\");\n_c2 = PayPal;\nexport default PayPal;\nvar _c, _c2;\n$RefreshReg$(_c, \"Message\");\n$RefreshReg$(_c2, \"PayPal\");","map":{"version":3,"names":["PayPalScriptProvider","PayPalButtons","React","useState","jsxDEV","_jsxDEV","SERVER","Message","content","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","PayPal","giftCard","_s","message","setMessage","initialOptions","className","options","style","shape","layout","createOrder","response","fetch","method","headers","body","JSON","stringify","cart","id","quantity","orderData","json","_orderData$details","errorDetail","details","errorMessage","issue","description","debug_id","Error","error","console","onApprove","data","actions","_orderData$details2","orderID","restart","transaction","purchase_units","payments","captures","status","log","_c2","$RefreshReg$"],"sources":["/Users/brian/Desktop/Fanatical/Client/src/Pages/payPal.js"],"sourcesContent":["import { PayPalScriptProvider, PayPalButtons } from \"@paypal/react-paypal-js\";\nimport React, {useState} from 'react';\n\nconst SERVER = 'http://server.railway.internal:8080'\n\nfunction Message({ content }) {\n    return <p>{content}</p>;\n}\n\nfunction PayPal({giftCard}){\n    const [message, setMessage] = useState(\"\");\n\n    const initialOptions = {\n\t    \"client-id\": \"AcyAYnzrPLNOe3uGmuZTIbpf-pEHgpKyCKU4pGYaQALmHGD671Z_FhE-jH3gE3WnidhKVmofYGnCmS9G\",\n        \"enable-funding\": \"paylater,venmo,card\",\n\t    \"disable-funding\": \"\",\n\t    \"data-sdk-integration-source\": \"integrationbuilder_sc\",\n    };\n\n    return(\n        <div className='payment'>\n            <PayPalScriptProvider options={initialOptions}>\n            <PayPalButtons\n            style={{\n                shape: \"rect\",\n                layout: \"vertical\",\n            }}\n            createOrder={async () => {\n                try {\n                    const response = await fetch(`${SERVER}/api/orders/`, {\n                    method: \"POST\",\n                    headers: {\n                    \"Content-Type\": \"application/json\",\n                    },\n                    // use the \"body\" param to optionally pass additional order information\n                    // like product ids and quantities\n                    body: JSON.stringify({\n                    cart: {\n                        id: \"GiftCard\",\n                        quantity: `${giftCard}`,\n                        },\n                    }),\n                });\n\n                const orderData = await response.json();\n\n                if (orderData.id) {\n                    return orderData.id;\n                    \n                } else {\n                    const errorDetail = orderData?.details?.[0];\n                    const errorMessage = errorDetail\n                    ? `${errorDetail.issue} ${errorDetail.description} (${orderData.debug_id})`\n                    : JSON.stringify(orderData);\n\n                    throw new Error(errorMessage);\n                }\n                } catch (error) {\n                console.error(error);\n                setMessage(`Could not initiate PayPal Checkout...${error}`);\n                }\n            }}\n            onApprove={async (data, actions) => {\n                try {\n                const response = await fetch(\n                    `${SERVER}/api/orders/${data.orderID}/capture`,\n                    {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                    },\n                    },\n                );\n\n                const orderData = await response.json();\n                // Three cases to handle:\n                //   (1) Recoverable INSTRUMENT_DECLINED -> call actions.restart()\n                //   (2) Other non-recoverable errors -> Show a failure message\n                //   (3) Successful transaction -> Show confirmation or thank you message\n\n                const errorDetail = orderData?.details?.[0];\n\n                if (errorDetail?.issue === \"INSTRUMENT_DECLINED\") {\n                    // (1) Recoverable INSTRUMENT_DECLINED -> call actions.restart()\n                    // recoverable state, per https://developer.paypal.com/docs/checkout/standard/customize/handle-funding-failures/\n                    return actions.restart();\n                } else if (errorDetail) {\n                    // (2) Other non-recoverable errors -> Show a failure message\n                    throw new Error(\n                    `${errorDetail.description} (${orderData.debug_id})`,\n                    );\n                } else {\n                    // (3) Successful transaction -> Show confirmation or thank you message\n                    // Or go to another URL:  actions.redirect('thank_you.html');\n                    const transaction =\n                    orderData.purchase_units[0].payments.captures[0];\n                    setMessage(\n                    `Transaction ${transaction.status}: ${transaction.id}. See console for all available details`,\n                    );\n                    console.log(\n                    \"Capture result\",\n                    orderData,\n                    JSON.stringify(orderData, null, 2),\n                    );\n                }\n                } catch (error) {\n                console.error(error);\n                setMessage(\n                    `Sorry, your transaction could not be processed...${error}`,\n                );\n                }\n            }}\n            />\n            </PayPalScriptProvider>\n            <Message content={message} />\n        </div>\n    );\n}\n\nexport default PayPal;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}