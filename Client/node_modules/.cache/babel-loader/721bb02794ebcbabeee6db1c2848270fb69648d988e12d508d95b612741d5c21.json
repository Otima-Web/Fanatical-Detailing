{"ast":null,"code":"import{PayPalScriptProvider,PayPalButtons}from\"@paypal/react-paypal-js\";import React,{useState}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const SERVER='https://server-production-af5b.up.railway.app';function Message(_ref){let{content}=_ref;return/*#__PURE__*/_jsx(\"p\",{children:content});}function PayPal(_ref2){let{giftCard}=_ref2;const[message,setMessage]=useState(\"\");const initialOptions={\"client-id\":\"AcyAYnzrPLNOe3uGmuZTIbpf-pEHgpKyCKU4pGYaQALmHGD671Z_FhE-jH3gE3WnidhKVmofYGnCmS9G\",\"enable-funding\":\"paylater,venmo,card\",\"disable-funding\":\"\",\"data-sdk-integration-source\":\"integrationbuilder_sc\"};return/*#__PURE__*/_jsxs(\"div\",{className:\"payment\",children:[/*#__PURE__*/_jsx(PayPalScriptProvider,{options:initialOptions,children:/*#__PURE__*/_jsx(PayPalButtons,{style:{shape:\"rect\",layout:\"vertical\"},createOrder:async()=>{try{const response=await fetch(\"\".concat(SERVER,\"/api/orders/\"),{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},// use the \"body\" param to optionally pass additional order information\n// like product ids and quantities\nbody:JSON.stringify({cart:{id:\"GiftCard\",quantity:\"\".concat(giftCard)}})});const orderData=await response.json();if(orderData.id){return orderData.id;}else{var _orderData$details;const errorDetail=orderData===null||orderData===void 0?void 0:(_orderData$details=orderData.details)===null||_orderData$details===void 0?void 0:_orderData$details[0];const errorMessage=errorDetail?\"\".concat(errorDetail.issue,\" \").concat(errorDetail.description,\" (\").concat(orderData.debug_id,\")\"):JSON.stringify(orderData);throw new Error(errorMessage);}}catch(error){console.error(error);setMessage(\"Could not initiate PayPal Checkout...\".concat(error));}},onApprove:async(data,actions)=>{try{var _orderData$details2;const response=await fetch(\"\".concat(SERVER,\"/api/orders/\").concat(data.orderID,\"/capture\"),{method:\"POST\",headers:{\"Content-Type\":\"application/json\"}});const orderData=await response.json();// Three cases to handle:\n//   (1) Recoverable INSTRUMENT_DECLINED -> call actions.restart()\n//   (2) Other non-recoverable errors -> Show a failure message\n//   (3) Successful transaction -> Show confirmation or thank you message\nconst errorDetail=orderData===null||orderData===void 0?void 0:(_orderData$details2=orderData.details)===null||_orderData$details2===void 0?void 0:_orderData$details2[0];if((errorDetail===null||errorDetail===void 0?void 0:errorDetail.issue)===\"INSTRUMENT_DECLINED\"){// (1) Recoverable INSTRUMENT_DECLINED -> call actions.restart()\n// recoverable state, per https://developer.paypal.com/docs/checkout/standard/customize/handle-funding-failures/\nreturn actions.restart();}else if(errorDetail){// (2) Other non-recoverable errors -> Show a failure message\nthrow new Error(\"\".concat(errorDetail.description,\" (\").concat(orderData.debug_id,\")\"));}else{// (3) Successful transaction -> Show confirmation or thank you message\n// Or go to another URL:  actions.redirect('thank_you.html');\nconst transaction=orderData.purchase_units[0].payments.captures[0];setMessage(\"Transaction \".concat(transaction.status,\": \").concat(transaction.id,\". See console for all available details\"));console.log(\"Capture result\",orderData,JSON.stringify(orderData,null,2));}}catch(error){console.error(error);setMessage(\"Sorry, your transaction could not be processed...\".concat(error));}}})}),/*#__PURE__*/_jsx(Message,{content:message})]});}export default PayPal;","map":{"version":3,"names":["PayPalScriptProvider","PayPalButtons","React","useState","jsx","_jsx","jsxs","_jsxs","SERVER","Message","_ref","content","children","PayPal","_ref2","giftCard","message","setMessage","initialOptions","className","options","style","shape","layout","createOrder","response","fetch","concat","method","headers","body","JSON","stringify","cart","id","quantity","orderData","json","_orderData$details","errorDetail","details","errorMessage","issue","description","debug_id","Error","error","console","onApprove","data","actions","_orderData$details2","orderID","restart","transaction","purchase_units","payments","captures","status","log"],"sources":["/Users/brian/Freelance/Fanatical/Client/src/Pages/payPal.js"],"sourcesContent":["import { PayPalScriptProvider, PayPalButtons } from \"@paypal/react-paypal-js\";\nimport React, {useState} from 'react';\n\nconst SERVER = 'https://server-production-af5b.up.railway.app'\n\nfunction Message({ content }) {\n    return <p>{content}</p>;\n}\n\nfunction PayPal({giftCard}){\n    const [message, setMessage] = useState(\"\");\n\n    const initialOptions = {\n\t    \"client-id\": \"AcyAYnzrPLNOe3uGmuZTIbpf-pEHgpKyCKU4pGYaQALmHGD671Z_FhE-jH3gE3WnidhKVmofYGnCmS9G\",\n        \"enable-funding\": \"paylater,venmo,card\",\n\t    \"disable-funding\": \"\",\n\t    \"data-sdk-integration-source\": \"integrationbuilder_sc\",\n    };\n\n    return(\n        <div className='payment'>\n            <PayPalScriptProvider options={initialOptions}>\n            <PayPalButtons\n            style={{\n                shape: \"rect\",\n                layout: \"vertical\",\n            }}\n            createOrder={async () => {\n                try {\n                    const response = await fetch(`${SERVER}/api/orders/`, {\n                    method: \"POST\",\n                    headers: {\n                    \"Content-Type\": \"application/json\",\n                    },\n                    // use the \"body\" param to optionally pass additional order information\n                    // like product ids and quantities\n                    body: JSON.stringify({\n                    cart: {\n                        id: \"GiftCard\",\n                        quantity: `${giftCard}`,\n                        },\n                    }),\n                });\n\n                const orderData = await response.json();\n\n                if (orderData.id) {\n                    return orderData.id;\n                    \n                } else {\n                    const errorDetail = orderData?.details?.[0];\n                    const errorMessage = errorDetail\n                    ? `${errorDetail.issue} ${errorDetail.description} (${orderData.debug_id})`\n                    : JSON.stringify(orderData);\n\n                    throw new Error(errorMessage);\n                }\n                } catch (error) {\n                console.error(error);\n                setMessage(`Could not initiate PayPal Checkout...${error}`);\n                }\n            }}\n            onApprove={async (data, actions) => {\n                try {\n                const response = await fetch(\n                    `${SERVER}/api/orders/${data.orderID}/capture`,\n                    {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                    },\n                    },\n                );\n\n                const orderData = await response.json();\n                // Three cases to handle:\n                //   (1) Recoverable INSTRUMENT_DECLINED -> call actions.restart()\n                //   (2) Other non-recoverable errors -> Show a failure message\n                //   (3) Successful transaction -> Show confirmation or thank you message\n\n                const errorDetail = orderData?.details?.[0];\n\n                if (errorDetail?.issue === \"INSTRUMENT_DECLINED\") {\n                    // (1) Recoverable INSTRUMENT_DECLINED -> call actions.restart()\n                    // recoverable state, per https://developer.paypal.com/docs/checkout/standard/customize/handle-funding-failures/\n                    return actions.restart();\n                } else if (errorDetail) {\n                    // (2) Other non-recoverable errors -> Show a failure message\n                    throw new Error(\n                    `${errorDetail.description} (${orderData.debug_id})`,\n                    );\n                } else {\n                    // (3) Successful transaction -> Show confirmation or thank you message\n                    // Or go to another URL:  actions.redirect('thank_you.html');\n                    const transaction =\n                    orderData.purchase_units[0].payments.captures[0];\n                    setMessage(\n                    `Transaction ${transaction.status}: ${transaction.id}. See console for all available details`,\n                    );\n                    console.log(\n                    \"Capture result\",\n                    orderData,\n                    JSON.stringify(orderData, null, 2),\n                    );\n                }\n                } catch (error) {\n                console.error(error);\n                setMessage(\n                    `Sorry, your transaction could not be processed...${error}`,\n                );\n                }\n            }}\n            />\n            </PayPalScriptProvider>\n            <Message content={message} />\n        </div>\n    );\n}\n\nexport default PayPal;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}